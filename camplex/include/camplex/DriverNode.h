#pragma once

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <camera_info_manager/camera_info_manager.h>

#include "camplex/CameraDriver.h"

// Services auto-generated by ROS
#include "camplex/CaptureFrames.h"
#include "camplex/GetCameraInfo.h"
#include "camplex/PrintCapabilities.h"
#include "camplex/SetStreaming.h"

#include <memory>
#include <boost/thread/locks.hpp>

namespace argus
{

	class DriverNode
	{
	public:
		
		typedef std::shared_ptr<DriverNode> Ptr;
		
		DriverNode( ros::NodeHandle& nh, ros::NodeHandle& ph );
		~DriverNode();
		
		bool CaptureFramesService( camplex::CaptureFrames::Request& req,
								   camplex::CaptureFrames::Response& res );
		
		bool GetCameraInfoService( camplex::GetCameraInfo::Request& req,
								   camplex::GetCameraInfo::Response& res );
		
		/*! \brief Service call that sets the camera's streaming state. */
		bool SetStreamingService( camplex::SetStreaming::Request& req,
								  camplex::SetStreaming::Response& res );
		
		/*! \brief Service call that requests the camera to print its capabilities
		 * to the terminal. */
		bool PrintCapabilitiesService( camplex::PrintCapabilities::Request& req,
									   camplex::PrintCapabilities::Response& res );
		
	private:

		typedef camera_info_manager::CameraInfoManager InfoManager;
		typedef boost::mutex Mutex;
		typedef boost::unique_lock<Mutex> Lock;
		typedef boost::condition_variable ConditionVariable;

		ros::NodeHandle nodeHandle;
		ros::NodeHandle privHandle;
		
		// Service handlers
		ros::ServiceServer captureFramesServer;
		ros::ServiceServer getInfoServer;
		ros::ServiceServer capabilitiesServer;
		ros::ServiceServer setStreamingServer;
		
		image_transport::ImageTransport it;
		image_transport::CameraPublisher it_pub;
		
		std::shared_ptr<InfoManager> cameraInfoManager;
		sensor_msgs::CameraInfo::Ptr cameraInfo;
		
		boost::thread processWorker;
		
		/*! \brief Denotes the camera's mode of operation. */
		enum StreamingMode
		{
			STREAM_OFF,
			STREAM_CONTINUOUS,
			STREAM_CAPTURE
		};
		
		Mutex mutex;
		ConditionVariable blocked;
		
		std::string cameraName;
		
		unsigned int frameCounter;
		StreamingMode mode;
		CameraDriver driver;
		unsigned int remainingToCapture;
		
		void Process();
		
		// Externally-locked functions to set the streaming state
		void StartStreaming( Lock& lock );
		void StartCapture( Lock& lock, unsigned int num );
		void StopStreaming( Lock& lock );
		
	};
	
}
