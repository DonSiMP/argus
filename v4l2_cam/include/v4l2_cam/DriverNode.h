#ifndef _V4L2D_DRIVER_NODE_H_
#define _V4L2D_DRIVER_NODE_H_

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <camera_info_manager/camera_info_manager.h>

#include "v4l2_cam/CameraDriver.h"

// Services auto-generated by ROS
#include "v4l2_cam/PrintCapabilities.h"
#include "v4l2_cam/SetStreaming.h"
#include "v4l2_cam/CameraStatus.h"

#include "resource_management/ResourceUser.h"

#include <memory>
#include <boost/thread/locks.hpp>
#include <boost/atomic.hpp>

namespace v4l2_cam
{

	// TODO Clean up resource logic calls
	class DriverNode
		: public resource_management::ResourceUser
	{
	public:
		
		typedef std::shared_ptr<DriverNode> Ptr;
		
		DriverNode( ros::NodeHandle& nh, ros::NodeHandle& ph );
		~DriverNode();
		
		/*! \brief Service call that sets the camera's streaming state. */
		bool SetStreamingService( v4l2_cam::SetStreaming::Request& req,
								  v4l2_cam::SetStreaming::Response& res );
		
		/*! \brief Service call that requests the camera to print its capabilities
		 * to the terminal. */
		bool PrintCapabilitiesService( v4l2_cam::PrintCapabilities::Request& req,
									   v4l2_cam::PrintCapabilities::Response& res );
		
		void StartStreaming();
		void StopStreaming();
		
	private:

		typedef camera_info_manager::CameraInfoManager InfoManager;
		typedef boost::mutex Mutex;
		typedef boost::unique_lock<Mutex> Lock;
		typedef boost::condition_variable ConditionVariable;

		ros::NodeHandle nodeHandle;
		ros::NodeHandle privHandle;
		
		// Service handlers
		ros::ServiceServer capabilitiesServer;
		ros::ServiceServer setStreamingServer;
		
		image_transport::ImageTransport it;
		image_transport::CameraPublisher it_pub;
		
		std::shared_ptr<InfoManager> cameraInfoManager;
		sensor_msgs::CameraInfo::Ptr cameraInfo;
		
		boost::atomic<bool> streaming;
		boost::thread processWorker;
		
		/*! \brief Denotes the camera's mode of operation. */
		enum StreamingMode
		{
			STREAM_OFF,
			STREAM_CONTINUOUS,
			STREAM_COUNT
		};
		

		
		ros::Publisher statusPublisher;
		
		Mutex mutex;
		ConditionVariable blocked;
		
		std::string cameraName;
		
		unsigned int frameCounter;		
		StreamingMode mode;
		v4l2_cam::CameraDriver driver;
		unsigned int remainingToStream;
		
		void Process();
		
	};
	
}

#endif
