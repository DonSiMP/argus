#!/usr/bin/env python
# dynamic reconfigure specification for stereo odometer

PACKAGE = "viso2_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gradient_enum = gen.enum([ gen.const("CentralDifference_3", int_t, 0x40, "3-tap central difference [1 0 -1] / 2"),
                             gen.const("CentralDifference_5", int_t, 0x41, "5-tap central difference [-1 8 0 -8 1 / 18]")],
                           "An enum to set the gradient estimation type")

loss_enum = gen.enum([ gen.const("Huber", int_t, 0x10, "Huberized robust loss"),
                       gen.const("Tukey", int_t, 0x11, "Tukey robust loss"),
                       gen.const("L2", int_t, 0x12, "Ordinary least squares")],
                     "An enum to set the IRLS loss")

verbosity_enum = gen.enum([ gen.const("Iteration", int_t, 0x20, "Every iteration"),
                            gen.const("Final", int_t, 0x21, "Summary at end"),
                            gen.const("Silent", int_t, 0x22, "No printouts"),
                            gen.const("Debug", int_t, 0x23, "Debug outputs")],
                          "An enum to set the verbosity level")

descriptor_enum = gen.enum([ gen.const("Intensity", int_t, 0x30, "Raw intensity (fast)"),
                             gen.const("IntensityAndGradient", int_t, 0x31, "Intensity + gradient constraints"),
                             gen.const("DescriptorFieldsFirstOrder", int_t, 0x32, "1st order descriptor fields"),
                             gen.const("DescriptorFieldsSecondOrder", int_t, 0x33, "2nd order descriptor fields"),
                             gen.const("Latch", int_t, 0x34, "Latch descriptor"),
                             gen.const("CentralDifference", int_t, 0x35, "Central difference descriptor"),
                             gen.const("Laplacian", int_t, 0x36, "Laplacian descriptor"),
                             gen.const("BitPlanes", int_t, 0x37, "BitPlanes (robust)") ],
                           "An enum to set the descriptor type")

interp_enum = gen.enum([ gen.const("Linear", int_t, 0x50, "Linear interpolation"),
                         gen.const("Cosine", int_t, 0x51, "Cosine interpolation"),
                         gen.const("Cubic", int_t, 0x52, "Cubic interpolation"),
                         gen.const("CubicHermite", int_t, 0x53, "Cubic Hermite (PCHIP)") ],
                        "An enum to set the image warping interpolation type")

gen.add("num_pyramid_levels",  int_t, 0, "Number of pyramid levels (negative means auto)", -1, -1, 4)
gen.add("min_pyramid_img_dim", int_t, 0, "Minimum dimension of the image at the coarsest pyramid level. This will be used if num_pyramid_levels <=0", 40, 20)

# Descriptors
gen.add("bitplanes_sigma_census", double_t, 0, "Std dev of Gaussian to apply to the image before computing the census transform. Non-positive value means None", 0, 0)
gen.add("bitplanes_sigma_smooth", double_t, 0, "Std dev of Gaussian to smooth the bit-planes", 0.5, 0)

gen.add("descfield_sigma_1", double_t, 0, "Std dev of Gaussian to apply before computing the gradient for descriptor fields", 0.75, 0.25)
gen.add("descfield_sigma_2", double_t, 0, "Std dev of Gaussian to apply after computing the gradient for descriptor fields", 1.75, 0.25)

gen.add("latch_num_bytes", int_t, 0, "Number of bytes for the latch descriptor", 1, 1)
gen.add("latch_rotation_invariance", bool_t, 0, "Whether to enable rotation invariance for the latch descriptor", False)
gen.add("latch_half_ssd_size", int_t, 0, "Half SSD size for the latch descriptor", 1, 1)

gen.add("centdiff_radius", int_t, 0, "Patch radius to use for central difference descriptor", 3, 2)
gen.add("centdiff_sigma_before", double_t, 0, "Sigma before computing the central difference descriptor", 0.75, 0.25)
gen.add("centdiff_sigma_after", double_t, 0, "Sigma after computing the central difference descriptor", 1.75, 0.25)

gen.add("laplacian_kernel_size", double_t, 0, "Kernel size for the laplacian descriptor", 1.0, 0.5)

# Optimization
gen.add("opt_max_iters", int_t, 0, "Maximum number of optimization iterations", 50, 20)
gen.add("opt_log_param_tol", double_t, 0, "Minimum base-10 log tolerance on parameter vector norm", -7, -9, -1)
gen.add("opt_log_func_tol", double_t, 0, "Minimum base-10 log tolerance on the objective value", -6, -9, -1)
gen.add("opt_log_grad_tol", double_t, 0, "Minimum base-10 log tolerance on the gradient norm", -8, -9, -1)
gen.add("opt_relax_coarse_tols", bool_t, 0, "Whether tolerances should be reduced for coarser pyramid levels", True)

gen.add("gradient_estimation", int_t, 0, "Gradient estimation type", 0x40, 0x40, 0x41, edit_method=gradient_enum)
gen.add("interpolation", int_t, 0, "Image warping interpolation type", 0x50, 0x50, 0x53, edit_method=interp_enum)
gen.add("loss_function", int_t, 0, "Loss function type", 0x11, 0x10, 0x12, edit_method=loss_enum)
gen.add("descriptor", int_t, 0, "Descriptor type", 0x30, 0x30, 0x37, edit_method=descriptor_enum)
gen.add("verbosity", int_t, 0, "Verbosity level", 0x22, 0x20, 0x23, edit_method=verbosity_enum)

# Keyframing
gen.add("keyframe_min_translation", double_t, 0, "Translational distance threshold for new keyframe", 0.15, 0.05)
gen.add("keyframe_min_rotation", double_t, 0, "Rotational distance threshold for new keyframe (deg)", 5.0, 1.0)
gen.add("keyframe_min_inlier_ratio", double_t, 0, "Normalized number of inliers threshold for new keyframe", 0.6, 0.3, 0.9)
gen.add("keyframe_inlier_threshold", double_t, 0, "IRLS weight threshold for inliers (ranging 0 to 1, 0 worst)", 0.85, 0.75, 0.95)

# Pixel selection
gen.add("min_pix_nms", int_t, 0, "Min number of pixels to do non-maxima supression over saliency map of the dense descriptor", 76800)
gen.add("radius_nms", int_t, 0, "Radius of non-maxima supression when performing pixel selection over the saliency map of the dense descriptor", 1, 1)
gen.add("min_num_pix", int_t, 0, "Min number of pixels to estimate pose", 256, 10)
gen.add("min_saliency", double_t, 0, "Min saliency value for a pixel to be used in optimization", 0.1, 0.05, 0.5)
gen.add("min_valid_disparity", double_t, 0, "Min valid disparity to use", 0.001, 0)
gen.add("max_valid_disparity", double_t, 0, "Max valid disparity to use", 512, 0)

# Other
gen.add("max_test_level", int_t, 0, "Max pyramid level to use for pose estimation. 0 means process up to finest level", 0, 0, 4)
gen.add("normalize_linsys", bool_t, 0, "Normalize values going into the linear system for a faster solution", True)

exit(gen.generate("dispair", "disparity_vo", "DisparityVO"))